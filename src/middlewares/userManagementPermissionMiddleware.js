// src/middlewares/userManagementPermissionMiddleware.js
const UserManagementService = require('../services/userManagementService');

/**
 * Middleware pour vÃ©rifier les permissions de gestion des utilisateurs
 * Ce middleware vÃ©rifie si l'utilisateur connectÃ© a le droit de gÃ©rer d'autres utilisateurs
 */
const userManagementPermissionMiddleware = (req, res, next) => {
  try {
    // VÃ©rifier que l'utilisateur est authentifiÃ©
    if (!req.user) {
      return res.status(401).json({
        type: 'https://httpstatuses.com/401',
        title: 'Authentification requise',
        status: 401,
        detail: 'Vous devez Ãªtre connectÃ© pour accÃ©der Ã  cette ressource'
      });
    }

    const userRole = req.user.role;

    // VÃ©rifier que l'utilisateur a des permissions de gestion
    const manageableRoles = UserManagementService.manageableRoles[userRole] || [];

    if (manageableRoles.length === 0) {
      return res.status(403).json({
        type: 'https://httpstatuses.com/403',
        title: 'Permissions insuffisantes',
        status: 403,
        detail: "Vous n'avez pas les permissions nÃ©cessaires pour gÃ©rer les utilisateurs"
      });
    }

    // Ajouter les informations de permissions dans la requÃªte pour utilisation ultÃ©rieure
    req.managementPermissions = {
      managerRole: userRole,
      manageableRoles: manageableRoles,
      roleHierarchy: UserManagementService.roleHierarchy
    };

    next();
  } catch (error) {
    console.error('Erreur middleware permissions utilisateurs:', error);
    return res.status(500).json({
      type: 'https://httpstatuses.com/500',
      title: 'Erreur interne',
      status: 500,
      detail: 'Erreur lors de la vÃ©rification des permissions'
    });
  }
};

/**
 * Middleware pour vÃ©rifier les permissions spÃ©cifiques Ã  un rÃ´le
 * @param {string|array} allowedRoles - RÃ´le(s) autorisÃ©(s) Ã  utiliser cette route
 */
const requireManagementRole = (allowedRoles) => {
  const roles = Array.isArray(allowedRoles) ? allowedRoles : [allowedRoles];

  return (req, res, next) => {
    try {
      if (!req.user) {
        return res.status(401).json({
          type: 'https://httpstatuses.com/401',
          title: 'Authentification requise',
          status: 401,
          detail: 'Vous devez Ãªtre connectÃ© pour accÃ©der Ã  cette ressource'
        });
      }

      const userRole = req.user.role;

      if (!roles.includes(userRole)) {
        return res.status(403).json({
          type: 'https://httpstatuses.com/403',
          title: 'RÃ´le insuffisant',
          status: 403,
          detail: `Cette action nÃ©cessite l'un des rÃ´les suivants: ${roles.join(', ')}. Votre rÃ´le: ${userRole}`
        });
      }

      next();
    } catch (error) {
      console.error('Erreur middleware rÃ´le de gestion:', error);
      return res.status(500).json({
        type: 'https://httpstatuses.com/500',
        title: 'Erreur interne',
        status: 500,
        detail: 'Erreur lors de la vÃ©rification du rÃ´le'
      });
    }
  };
};

/**
 * Middleware pour valider qu'un rÃ´le peut Ãªtre gÃ©rÃ© par l'utilisateur connectÃ©
 * UtilisÃ© dans les routes de crÃ©ation/modification oÃ¹ un rÃ´le est spÃ©cifiÃ©
 */
const validateTargetRole = (req, res, next) => {
  try {
    const { role } = req.body;

    if (!role) {
      return next(); // Si pas de rÃ´le spÃ©cifiÃ©, passer au suivant
    }

    const userRole = req.user.role;
    const manageableRoles = UserManagementService.manageableRoles[userRole] || [];

    if (!manageableRoles.includes(role)) {
      return res.status(403).json({
        type: 'https://httpstatuses.com/403',
        title: 'RÃ´le non autorisÃ©',
        status: 403,
        detail: `Vous ne pouvez pas crÃ©er/modifier un utilisateur avec le rÃ´le "${role}". RÃ´les autorisÃ©s: ${manageableRoles.join(', ')}`
      });
    }

    next();
  } catch (error) {
    console.error('Erreur validation rÃ´le cible:', error);
    return res.status(500).json({
      type: 'https://httpstatuses.com/500',
      title: 'Erreur interne',
      status: 500,
      detail: 'Erreur lors de la validation du rÃ´le cible'
    });
  }
};

/**
 * Middleware pour s'assurer qu'un utilisateur ne peut pas se modifier lui-mÃªme
 * via les routes de gestion (sauf pour certaines actions spÃ©cifiques)
 */
const preventSelfManagement = (req, res, next) => {
  try {
    const targetUserId = parseInt(req.params.id);
    const currentUserId = req.user.id;

    if (targetUserId === currentUserId) {
      return res.status(400).json({
        type: 'https://httpstatuses.com/400',
        title: 'Auto-gestion interdite',
        status: 400,
        detail:
          'Vous ne pouvez pas vous gÃ©rer vous-mÃªme via ces routes. Utilisez les routes de profil appropriÃ©es.'
      });
    }

    next();
  } catch (error) {
    console.error('Erreur middleware auto-gestion:', error);
    return res.status(500).json({
      type: 'https://httpstatuses.com/500',
      title: 'Erreur interne',
      status: 500,
      detail: "Erreur lors de la vÃ©rification d'auto-gestion"
    });
  }
};

/**
 * Middleware de logging des actions de gestion
 * Enregistre les actions importantes pour audit
 */
const logManagementAction = (action) => {
  return (req, res, next) => {
    const originalSend = res.send;

    res.send = function (data) {
      // Logger uniquement si la requÃªte a rÃ©ussi (status 2xx)
      if (res.statusCode >= 200 && res.statusCode < 300) {
        console.log(`ğŸ“‹ [GESTION_UTILISATEURS] ${action.toUpperCase()}`);
        console.log(`   Manager: ${req.user.name} (${req.user.role})`);
        console.log(`   Timestamp: ${new Date().toISOString()}`);

        if (req.params.id) {
          console.log(`   Utilisateur cible: ID ${req.params.id}`);
        }

        if (req.body.role) {
          console.log(`   RÃ´le cible: ${req.body.role}`);
        }
      }

      // Appeler la mÃ©thode send originale
      originalSend.call(this, data);
    };

    next();
  };
};

module.exports = {
  userManagementPermissionMiddleware,
  requireManagementRole,
  validateTargetRole,
  preventSelfManagement,
  logManagementAction
};
