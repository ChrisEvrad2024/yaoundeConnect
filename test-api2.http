# ====================================================================
# üîê TESTS AUTHENTIFICATION yaoundeConnect
# ====================================================================
# Fichier de test complet pour l'authentification
# Utilisez avec VS Code REST Client extension ou Postman

# Variables globales
@baseUrl = http://localhost:9999
@superAdminEmail = chrisomgba04@gmail.com
@superAdminPassword = passWord123!

# Token sera mis √† jour apr√®s connexion
@token =eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MzUsImVtYWlsIjoiY2hyaXNvbWdiYTA0QGdtYWlsLmNvbSIsInJvbGUiOiJjb2xsZWN0ZXVyIiwiaWF0IjoxNzUzNTY3MDcxLCJleHAiOjE3NTQxNzE4NzF9.ECghd3ULqhhBfyjgyyO2hIV6JhYzwQXhpxQCUtEA_DI

# ====================================================================
# üè• 1. SANT√â DU SERVEUR
# ====================================================================

### Test de connectivit√© de base
GET {{baseUrl}}/health

### Test route racine
GET {{baseUrl}}/

# ====================================================================
# üëë 2. CONNEXION SUPER ADMIN
# ====================================================================

### Connexion Super Admin (cr√©√© pr√©c√©demment)
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "chrisomgba04@gmail.com",
  "password": "MariePassword123!"
}

### Connexion avec le super admin de test
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "test@gmail.com",
  "password": "passWord123!"
}

# ====================================================================
# üìù 3. INSCRIPTION NOUVEAUX UTILISATEURS
# ====================================================================

### Inscription Utilisateur Membre
POST {{baseUrl}}/api/auth/register
Content-Type: application/json

{
  "name": "Jean Dupont",
  "email": "jean.dupont.test@gmail.com",
  "password": "JeanPassword123!",
  "role": "membre"
}

### Inscription Collecteur
POST {{baseUrl}}/api/auth/register
Content-Type: application/json

{
  "name": "Marie Collecteur",
  "email": "chrisomgba04@gmail.com",
  "password": "MariePassword123!",
  "role": "collecteur"
}

### Inscription Mod√©rateur
POST {{baseUrl}}/api/auth/register
Content-Type: application/json

{
  "name": "Paul Moderateur",
  "email": "paul.moderateur.test@gmail.com",
  "password": "PaulPassword123!",
  "role": "moderateur"
}

### Inscription Admin
POST {{baseUrl}}/api/auth/register
Content-Type: application/json

{
  "name": "Sophie Admin",
  "email": "sophie.admin.test@gmail.com",
  "password": "SophiePassword123!",
  "role": "admin"
}

# ====================================================================
# üìß 4. V√âRIFICATION EMAIL
# ====================================================================

### V√©rification email (remplacez TOKEN_DE_VERIFICATION par le token re√ßu)
GET {{baseUrl}}/api/auth/verify-email?token=TOKEN_DE_VERIFICATION

### Renvoyer email de v√©rification
POST {{baseUrl}}/api/auth/resend-verification
Content-Type: application/json

{
  "email": "jean.dupont.test@gmail.com"
}

# ====================================================================
# üîê 5. TESTS DE CONNEXION
# ====================================================================

### Tentative connexion AVANT v√©rification email (doit √©chouer)
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "jean.dupont.test@gmail.com",
  "password": "JeanPassword123!"
}

### Connexion APR√àS v√©rification email (doit r√©ussir)
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "jean.dupont.test@gmail.com",
  "password": "JeanPassword123!"
}

### Test connexion avec mauvais mot de passe
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "jean.dupont.test@gmail.com",
  "password": "MauvaisMotDePasse"
}

### Test connexion avec email inexistant
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "inexistant@gmail.com",
  "password": "Password123!"
}

# ====================================================================
# üîí 6. ROUTES PROT√âG√âES (Besoin d'un token valide)
# ====================================================================
# Copiez le token depuis une r√©ponse de connexion r√©ussie

### R√©cup√©rer profil utilisateur connect√©
GET {{baseUrl}}/api/auth/me
Authorization: Bearer {{token}}

### Test acc√®s sans token (doit √©chouer)
GET {{baseUrl}}/api/auth/me

### Test acc√®s avec token invalide (doit √©chouer)
GET {{baseUrl}}/api/auth/me
Authorization: Bearer invalid-token-example

### Test d√©connexion
POST {{baseUrl}}/api/auth/logout
Authorization: Bearer {{token}}

# ====================================================================
# üß™ 7. TESTS DE VALIDATION
# ====================================================================

### Inscription avec donn√©es invalides - Email manquant
POST {{baseUrl}}/api/auth/register
Content-Type: application/json

{
  "name": "Test User",
  "password": "Password123!"
}

### Inscription avec email invalide
POST {{baseUrl}}/api/auth/register
Content-Type: application/json

{
  "name": "Test User",
  "email": "email-invalide",
  "password": "Password123!"
}

### Inscription avec mot de passe trop court
POST {{baseUrl}}/api/auth/register
Content-Type: application/json

{
  "name": "Test User",
  "email": "test.user@gmail.com",
  "password": "123"
}

### Inscription avec r√¥le invalide
POST {{baseUrl}}/api/auth/register
Content-Type: application/json

{
  "name": "Test User",
  "email": "test.user@gmail.com",
  "password": "Password123!",
  "role": "role_inexistant"
}

### Tentative double inscription (m√™me email)
POST {{baseUrl}}/api/auth/register
Content-Type: application/json

{
  "name": "Doublon User",
  "email": "jean.dupont.test@gmail.com",
  "password": "Password123!"
}

# ====================================================================
# üéØ 8. TESTS DE R√îLES ET PERMISSIONS
# ====================================================================

### Connexion avec diff√©rents r√¥les pour tester les permissions

### Membre
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "jean.dupont.test@gmail.com",
  "password": "JeanPassword123!"
}

### Collecteur
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "marie.collecteur.test@gmail.com",
  "password": "MariePassword123!"
}

### Mod√©rateur
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "paul.moderateur.test@gmail.com",
  "password": "PaulPassword123!"
}

### Admin
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "sophie.admin.test@gmail.com",
  "password": "SophiePassword123!"
}

### Super Admin
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "{{superAdminEmail}}",
  "password": "{{superAdminPassword}}"
}

# ====================================================================
# üîç 9. TESTS D'ERREURS ET CAS LIMITES
# ====================================================================

### V√©rification avec token expir√©/invalide
GET {{baseUrl}}/api/auth/verify-email?token=token-invalide-ou-expire

### Renvoyer v√©rification pour email inexistant
POST {{baseUrl}}/api/auth/resend-verification
Content-Type: application/json

{
  "email": "inexistant@gmail.com"
}

### Renvoyer v√©rification pour email d√©j√† v√©rifi√©
POST {{baseUrl}}/api/auth/resend-verification
Content-Type: application/json

{
  "email": "{{superAdminEmail}}"
}

# ====================================================================
# üöÄ 10. TESTS DE PERFORMANCE ET S√âCURIT√â
# ====================================================================

### Test de multiples tentatives de connexion (rate limiting)
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "test@gmail.com",
  "password": "mauvais-password"
}

### Test injection SQL basique (doit √™tre bloqu√©e)
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "admin'; DROP TABLE users; --",
  "password": "password"
}

### Test XSS basique (doit √™tre √©chapp√©)
POST {{baseUrl}}/api/auth/register
Content-Type: application/json

{
  "name": "<script>alert('XSS')</script>",
  "email": "xss.test@gmail.com",
  "password": "Password123!"
}

# ====================================================================
# üìä 11. TESTS DE MONITORING
# ====================================================================

### Test endpoints de monitoring/stats (si disponibles)
GET {{baseUrl}}/api/stats
Authorization: Bearer {{token}}

### Test logs syst√®me (super admin uniquement)
GET {{baseUrl}}/api/admin/logs
Authorization: Bearer {{token}}

# ====================================================================
# üîÑ 12. WORKFLOW COMPLET TYPE
# ====================================================================

### WORKFLOW STANDARD : Inscription -> V√©rification -> Connexion

### √âtape 1 : Inscription nouveau utilisateur
POST {{baseUrl}}/api/auth/register
Content-Type: application/json

{
  "name": "Workflow Test User",
  "email": "workflow.test@gmail.com",
  "password": "WorkflowPassword123!",
  "role": "membre"
}

### √âtape 2 : V√©rification email (remplacez le token)
# GET {{baseUrl}}/api/auth/verify-email?token=VOTRE_TOKEN_ICI

### √âtape 3 : Connexion apr√®s v√©rification
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "workflow.test@gmail.com",
  "password": "WorkflowPassword123!"
}

### √âtape 4 : Acc√®s au profil
GET {{baseUrl}}/api/auth/me
Authorization: Bearer {{token}}

### √âtape 5 : D√©connexion
POST {{baseUrl}}/api/auth/logout
Authorization: Bearer {{token}}

# ====================================================================
# üìù NOTES IMPORTANTES
# ====================================================================
#
# 1. üîë TOKEN MANAGEMENT:
#    - Copiez le token depuis les r√©ponses de connexion
#    - Remplacez {{token}} par le token r√©el
#    - Les tokens expirent apr√®s 7 jours par d√©faut
#
# 2. üìß EMAIL VERIFICATION:
#    - En d√©veloppement, les tokens sont visibles dans les r√©ponses
#    - Remplacez TOKEN_DE_VERIFICATION par le token re√ßu
#    - Les tokens de v√©rification expirent apr√®s 24h
#
# 3. üß™ ENVIRONNEMENT DE TEST:
#    - Assurez-vous que le serveur tourne sur localhost:9999
#    - Base de donn√©es configur√©e et accessible
#    - Service email configur√© (mode dev accept√©)
#
# 4. üîí S√âCURIT√â:
#    - Ne committez jamais de vrais tokens
#    - Utilisez des emails de test uniquement
#    - Changez les mots de passe en production
#
# 5. ‚ö° UTILISATION:
#    - Installez REST Client extension dans VS Code
#    - Ou importez dans Postman/Insomnia
#    - Ex√©cutez les requ√™tes dans l'ordre pour le workflow complet
#
# ====================================================================