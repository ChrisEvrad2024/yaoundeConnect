// debug_routes.js - Cr√©ez ce fichier √† la racine
console.log('üîç Debug d√©taill√© des routes...\n');

const express = require('express');

try {
    // Test 1: Imports de base
    console.log('1Ô∏è‚É£ Test des imports...');
    const AuthController = require('./src/controllers/authController');
    const authMiddleware = require('./src/middlewares/authMiddleware');
    const validationMiddleware = require('./src/middlewares/validationMiddleware');
    const authValidator = require('./src/validators/authValidator');
    
    console.log('‚úÖ Tous les imports OK');

    // Test 2: V√©rification des types
    console.log('\n2Ô∏è‚É£ V√©rification des types...');
    console.log('AuthController.register:', typeof AuthController.register);
    console.log('AuthController.login:', typeof AuthController.login);
    console.log('authMiddleware:', typeof authMiddleware);
    console.log('validationMiddleware:', typeof validationMiddleware);
    
    // Test 3: Test des validators
    console.log('\n3Ô∏è‚É£ Test des validators...');
    console.log('authValidator.register:', typeof authValidator.register);
    console.log('authValidator.login:', typeof authValidator.login);
    
    // Test 4: Test validation middleware
    console.log('\n4Ô∏è‚É£ Test validation middleware...');
    const testValidationMiddleware = validationMiddleware(authValidator.register);
    console.log('validationMiddleware(authValidator.register):', typeof testValidationMiddleware);
    
    // Test 5: Cr√©ation du router √©tape par √©tape
    console.log('\n5Ô∏è‚É£ Test cr√©ation du router...');
    const router = express.Router();
    console.log('‚úÖ Router cr√©√©');
    
    // Test 6: Ajout des routes une par une
    console.log('\n6Ô∏è‚É£ Test ajout des routes...');
    
    try {
        router.post('/register',
            validationMiddleware(authValidator.register),
            AuthController.register
        );
        console.log('‚úÖ Route /register ajout√©e');
    } catch (error) {
        console.log('‚ùå Erreur route /register:', error.message);
    }
    
    try {
        router.post('/login',
            validationMiddleware(authValidator.login),
            AuthController.login
        );
        console.log('‚úÖ Route /login ajout√©e');
    } catch (error) {
        console.log('‚ùå Erreur route /login:', error.message);
    }
    
    try {
        router.get('/verify-email',
            validationMiddleware(authValidator.verifyEmail, 'query'),
            AuthController.verifyEmail
        );
        console.log('‚úÖ Route /verify-email ajout√©e');
    } catch (error) {
        console.log('‚ùå Erreur route /verify-email:', error.message);
    }
    
    try {
        router.post('/resend-verification',
            validationMiddleware(authValidator.resendVerification),
            AuthController.resendVerification
        );
        console.log('‚úÖ Route /resend-verification ajout√©e');
    } catch (error) {
        console.log('‚ùå Erreur route /resend-verification:', error.message);
    }
    
    try {
        router.get('/me',
            authMiddleware,
            AuthController.getProfile
        );
        console.log('‚úÖ Route /me ajout√©e');
    } catch (error) {
        console.log('‚ùå Erreur route /me:', error.message);
    }
    
    try {
        router.post('/logout',
            authMiddleware,
            AuthController.logout
        );
        console.log('‚úÖ Route /logout ajout√©e');
    } catch (error) {
        console.log('‚ùå Erreur route /logout:', error.message);
    }
    
    console.log('\nüéâ Toutes les routes test√©es individuellement');
    console.log('üìã Routes disponibles:', router.stack.map(layer => `${layer.route.path} [${Object.keys(layer.route.methods).join(', ')}]`));

} catch (error) {
    console.log('‚ùå Erreur globale:', error.message);
    console.log('Stack:', error.stack);
}