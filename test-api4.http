# ====================================================================
# üß™ TEST COMPLET: SYST√àME DE GESTION DES UTILISATEURS
# ====================================================================
# Test du syst√®me hi√©rarchique de gestion des utilisateurs
# SuperAdmin ‚Üí Admin ‚Üí Mod√©rateur ‚Üí Collecteur ‚Üí Membre
# Utilisez avec VS Code REST Client extension ou Postman

# Variables globales
@baseUrl = http://localhost:9999

# Donn√©es des utilisateurs de test existants
@superAdminEmail = chrisomgba04@gmail.com
@superAdminPassword = passWord123!

# Tokens √† mettre √† jour apr√®s chaque connexion
@superAdminToken =eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MzcsImVtYWlsIjoiY2hyaXNvbWdiYTA0QGdtYWlsLmNvbSIsInJvbGUiOiJzdXBlcmFkbWluIiwiaWF0IjoxNzU0NTk5MDY4LCJleHAiOjE3NTUyMDM4Njh9.ljlJWuutJrc2Hha7xYxQEh3MlinPGuWN-h-NaokWMck
@adminToken = 
@moderateurToken = 
@collecteurToken = 
@membreToken = 

# IDs des utilisateurs cr√©√©s (√† mettre √† jour)
@adminId = 
@moderateurId = 
@collecteurId = 
@membreId = 

# ====================================================================
# üè• 1. V√âRIFICATIONS INITIALES
# ====================================================================

### 1.1 Test de connectivit√©
GET {{baseUrl}}/health

### 1.2 Test route racine
GET {{baseUrl}}/

### 1.3 V√©rifier que l'API fonctionne
GET {{baseUrl}}/api/auth/me
# Cette requ√™te doit √©chouer sans token (normal)

# ====================================================================
# üëë 2. CONNEXION SUPER ADMINISTRATEUR
# ====================================================================

### 2.1 Connexion Super Admin
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "{{superAdminEmail}}",
  "password": "{{superAdminPassword}}"
}

# üìù COPIEZ LE TOKEN DE LA R√âPONSE CI-DESSUS DANS @superAdminToken

### 2.2 V√©rifier le profil super admin
GET {{baseUrl}}/api/auth/me
Authorization: Bearer {{superAdminToken}}

### 2.3 V√©rifier les r√¥les g√©rables par le super admin
GET {{baseUrl}}/api/users/roles
Authorization: Bearer {{superAdminToken}}

### 2.4 Statistiques de gestion du super admin
GET {{baseUrl}}/api/users/stats
Authorization: Bearer {{superAdminToken}}

# ====================================================================
# üéØ 3. CR√âATION DE LA HI√âRARCHIE D'UTILISATEURS
# ====================================================================

### 3.1 Super Admin cr√©e un Admin
POST {{baseUrl}}/api/users
Authorization: Bearer {{superAdminToken}}
Content-Type: application/json

{
  "name": "Admin Test",
  "email": "admin.test@yaoundeconnect.com",
  "password": "AdminTest123!",
  "role": "admin"
}

# üìù COPIEZ L'ID DE L'ADMIN DE LA R√âPONSE CI-DESSUS DANS @adminId

### 3.2 Connexion du nouvel Admin
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "admin.test@yaoundeconnect.com",
  "password": "AdminTest123!"
}

# üìù COPIEZ LE TOKEN DE LA R√âPONSE CI-DESSUS DANS @adminToken

### 3.3 Admin cr√©e un Mod√©rateur
POST {{baseUrl}}/api/users
Authorization: Bearer {{superAdminToken}}
Content-Type: application/json

{
  "name": "Mod√©rateur Test",
  "email": "moderateur.test@yaoundeconnect.com",
  "password": "ModTest123!",
  "role": "moderateur"
}

# üìù COPIEZ L'ID DU MOD√âRATEUR DE LA R√âPONSE CI-DESSUS DANS @moderateurId

### 3.4 Connexion du Mod√©rateur
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "moderateur.test@yaoundeconnect.com",
  "password": "ModTest123!"
}

# üìù COPIEZ LE TOKEN DE LA R√âPONSE CI-DESSUS DANS @moderateurToken

### 3.5 Mod√©rateur cr√©e un Collecteur
POST {{baseUrl}}/api/users
Authorization: Bearer {{moderateurToken}}
Content-Type: application/json

{
  "name": "Collecteur Test",
  "email": "collecteur.test@yaoundeconnect.com",
  "password": "CollTest123!",
  "role": "collecteur"
}

# üìù COPIEZ L'ID DU COLLECTEUR DE LA R√âPONSE CI-DESSUS DANS @collecteurId

### 3.6 Connexion du Collecteur
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "collecteur.test@yaoundeconnect.com",
  "password": "CollTest123!"
}

# üìù COPIEZ LE TOKEN DE LA R√âPONSE CI-DESSUS DANS @collecteurToken

### 3.7 Admin cr√©e un Membre (tous peuvent cr√©er des membres)
POST {{baseUrl}}/api/users
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "name": "Membre Test",
  "email": "membre.test@yaoundeconnect.com",
  "password": "MembreTest123!",
  "role": "membre"
}

# üìù COPIEZ L'ID DU MEMBRE DE LA R√âPONSE CI-DESSUS DANS @membreId

### 3.8 Connexion du Membre
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "membre.test@yaoundeconnect.com",
  "password": "MembreTest123!"
}

# üìù COPIEZ LE TOKEN DE LA R√âPONSE CI-DESSUS DANS @membreToken

# ====================================================================
# üîç 4. TESTS DE PERMISSIONS ET HI√âRARCHIE
# ====================================================================

### 4.1 Super Admin voit tous les utilisateurs
GET {{baseUrl}}/api/users?limit=50
Authorization: Bearer {{superAdminToken}}

### 4.2 Admin voit seulement mod√©rateurs et collecteurs
GET {{baseUrl}}/api/users?limit=50
Authorization: Bearer {{adminToken}}

### 4.3 Mod√©rateur voit seulement les collecteurs
GET {{baseUrl}}/api/users?limit=50
Authorization: Bearer {{moderateurToken}}

### 4.4 Collecteur ne peut pas g√©rer d'utilisateurs (doit √©chouer)
GET {{baseUrl}}/api/users
Authorization: Bearer {{collecteurToken}}

### 4.5 Membre ne peut pas g√©rer d'utilisateurs (doit √©chouer)
GET {{baseUrl}}/api/users
Authorization: Bearer {{membreToken}}

# ====================================================================
# ‚ùå 5. TESTS DE RESTRICTIONS (DOIVENT √âCHOUER)
# ====================================================================

### 5.1 Admin ne peut PAS cr√©er un autre admin (doit √©chouer)
POST {{baseUrl}}/api/users
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "name": "Admin Interdit",
  "email": "admin.interdit@test.com",
  "password": "AdminInt123!",
  "role": "admin"
}

### 5.2 Mod√©rateur ne peut PAS cr√©er un admin (doit √©chouer)
POST {{baseUrl}}/api/users
Authorization: Bearer {{moderateurToken}}
Content-Type: application/json

{
  "name": "Admin Interdit 2",
  "email": "admin.interdit2@test.com",
  "password": "AdminInt123!",
  "role": "admin"
}

### 5.3 Collecteur ne peut PAS cr√©er d'utilisateurs (doit √©chouer)
POST {{baseUrl}}/api/users
Authorization: Bearer {{collecteurToken}}
Content-Type: application/json

{
  "name": "Utilisateur Interdit",
  "email": "user.interdit@test.com",
  "password": "UserInt123!",
  "role": "membre"
}

### 5.4 Mod√©rateur ne peut PAS modifier un admin (doit √©chouer)
PUT {{baseUrl}}/api/users/{{adminId}}
Authorization: Bearer {{moderateurToken}}
Content-Type: application/json

{
  "name": "Tentative Interdite"
}

### 5.5 Auto-gestion interdite - Admin ne peut pas se modifier (doit √©chouer)
PUT {{baseUrl}}/api/users/{{adminId}}
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "name": "Auto Modification"
}

# ====================================================================
# ‚úÖ 6. TESTS DE MODIFICATIONS AUTORIS√âES
# ====================================================================

### 6.1 Super Admin modifie l'Admin
PUT {{baseUrl}}/api/users/{{adminId}}
Authorization: Bearer {{superAdminToken}}
Content-Type: application/json

{
  "name": "Admin Test Modifi√©",
  "is_email_verified": true
}

### 6.2 Admin modifie le Mod√©rateur
PUT {{baseUrl}}/api/users/{{moderateurId}}
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "name": "Mod√©rateur Test Modifi√©"
}

### 6.3 Mod√©rateur modifie le Collecteur
PUT {{baseUrl}}/api/users/{{collecteurId}}
Authorization: Bearer {{moderateurToken}}
Content-Type: application/json

{
  "name": "Collecteur Test Modifi√©",
  "email": "collecteur.modifie@yaoundeconnect.com"
}

### 6.4 Changement de r√¥le autoris√© - Admin promote Collecteur en Mod√©rateur
PUT {{baseUrl}}/api/users/{{collecteurId}}
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "role": "moderateur"
}

### 6.5 V√©rifier la modification du r√¥le
GET {{baseUrl}}/api/users/{{collecteurId}}
Authorization: Bearer {{adminToken}}

# ====================================================================
# üîë 7. TESTS DE R√âINITIALISATION DE MOT DE PASSE
# ====================================================================

### 7.1 Admin reset le password du Mod√©rateur
POST {{baseUrl}}/api/users/{{moderateurId}}/reset-password
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "new_password": "NouveauModPass123!"
}

### 7.2 Super Admin reset le password de l'Admin
POST {{baseUrl}}/api/users/{{adminId}}/reset-password
Authorization: Bearer {{superAdminToken}}
Content-Type: application/json

{
  "new_password": "NouvelAdminPass123!"
}

### 7.3 Collecteur ne peut PAS reset de password (doit √©chouer)
POST {{baseUrl}}/api/users/{{membreId}}/reset-password
Authorization: Bearer {{collecteurToken}}
Content-Type: application/json

{
  "new_password": "TentativeInt123!"
}

### 7.4 Test connexion avec nouveau password
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "admin.test@yaoundeconnect.com",
  "password": "NouvelAdminPass123!"
}

# ====================================================================
# üìä 8. TESTS DE CONSULTATION ET STATISTIQUES
# ====================================================================

### 8.1 Statistiques d√©taill√©es par r√¥le
GET {{baseUrl}}/api/users/stats
Authorization: Bearer {{superAdminToken}}

### 8.2 Statistiques Admin (ne voit que ses utilisateurs g√©rables)
GET {{baseUrl}}/api/users/stats
Authorization: Bearer {{adminToken}}

### 8.3 Filtrage par r√¥le - Admin recherche ses mod√©rateurs
GET {{baseUrl}}/api/users?role=moderateur
Authorization: Bearer {{adminToken}}

### 8.4 Recherche par nom/email
GET {{baseUrl}}/api/users?search=Test
Authorization: Bearer {{superAdminToken}}

### 8.5 Pagination et tri
GET {{baseUrl}}/api/users?page=1&limit=3&sort_by=created_at&sort_order=desc
Authorization: Bearer {{superAdminToken}}

### 8.6 Obtenir un utilisateur sp√©cifique
GET {{baseUrl}}/api/users/{{moderateurId}}
Authorization: Bearer {{adminToken}}

# ====================================================================
# üìú 9. TESTS D'HISTORIQUE ET AUDIT
# ====================================================================

### 9.1 Historique complet de l'Admin
GET {{baseUrl}}/api/users/{{adminId}}/history
Authorization: Bearer {{superAdminToken}}

### 9.2 Historique du Mod√©rateur
GET {{baseUrl}}/api/users/{{moderateurId}}/history
Authorization: Bearer {{adminToken}}

### 9.3 Historique du Collecteur
GET {{baseUrl}}/api/users/{{collecteurId}}/history
Authorization: Bearer {{moderateurToken}}

### 9.4 Collecteur ne peut PAS voir l'historique (doit √©chouer)
GET {{baseUrl}}/api/users/{{moderateurId}}/history
Authorization: Bearer {{collecteurToken}}

# ====================================================================
# üóëÔ∏è 10. TESTS DE SUPPRESSION
# ====================================================================

### 10.1 Cr√©er un utilisateur temporaire pour test de suppression
POST {{baseUrl}}/api/users
Authorization: Bearer {{moderateurToken}}
Content-Type: application/json

{
  "name": "Utilisateur Temporaire",
  "email": "temp.user@test.com",
  "password": "TempUser123!",
  "role": "collecteur"
}

# üìù COPIEZ L'ID DE L'UTILISATEUR TEMPORAIRE
@tempUserId = 

### 10.2 Mod√©rateur supprime le collecteur temporaire
DELETE {{baseUrl}}/api/users/{{tempUserId}}
Authorization: Bearer {{moderateurToken}}

### 10.3 V√©rifier que l'utilisateur est supprim√© (doit retourner 404)
GET {{baseUrl}}/api/users/{{tempUserId}}
Authorization: Bearer {{moderateurToken}}

### 10.4 Collecteur ne peut PAS supprimer (doit √©chouer)
DELETE {{baseUrl}}/api/users/{{membreId}}
Authorization: Bearer {{collecteurToken}}

# ====================================================================
# üîí 11. TESTS DE S√âCURIT√â ET VALIDATION
# ====================================================================

### 11.1 Cr√©ation avec mot de passe faible (doit √©chouer)
POST {{baseUrl}}/api/users
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "name": "Test Weak Password",
  "email": "weak.password@test.com",
  "password": "123",
  "role": "collecteur"
}

### 11.2 Cr√©ation avec email invalide (doit √©chouer)
POST {{baseUrl}}/api/users
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "name": "Test Invalid Email",
  "email": "email_invalide",
  "password": "ValidPass123!",
  "role": "collecteur"
}

### 11.3 Cr√©ation avec email existant (doit √©chouer)
POST {{baseUrl}}/api/users
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "name": "Test Duplicate Email",
  "email": "admin.test@yaoundeconnect.com",
  "password": "ValidPass123!",
  "role": "collecteur"
}

### 11.4 Modification sans donn√©es (doit √©chouer)
PUT {{baseUrl}}/api/users/{{moderateurId}}
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{}

### 11.5 Token invalide (doit √©chouer)
GET {{baseUrl}}/api/users
Authorization: Bearer invalid_token

### 11.6 Sans token (doit √©chouer)
GET {{baseUrl}}/api/users

# ====================================================================
# üõ†Ô∏è 12. TESTS DE D√âVELOPPEMENT (si NODE_ENV=development)
# ====================================================================

### 12.1 Documentation des permissions (dev uniquement)
GET {{baseUrl}}/api/users/dev/permissions
Authorization: Bearer {{adminToken}}

### 12.2 Documentation des permissions - Super Admin
GET {{baseUrl}}/api/users/dev/permissions
Authorization: Bearer {{superAdminToken}}

### 12.3 Documentation des permissions - Mod√©rateur
GET {{baseUrl}}/api/users/dev/permissions
Authorization: Bearer {{moderateurToken}}

# ====================================================================
# üîÑ 13. TESTS DE WORKFLOW COMPLETS
# ====================================================================

### 13.1 Workflow: Super Admin cr√©e une √©quipe compl√®te
# Cr√©er Admin
POST {{baseUrl}}/api/users
Authorization: Bearer {{superAdminToken}}
Content-Type: application/json

{
  "name": "Admin √âquipe Alpha",
  "email": "admin.alpha@yaoundeconnect.com",
  "password": "AdminAlpha123!",
  "role": "admin"
}

### 13.2 Connexion du nouvel Admin √âquipe
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "admin.alpha@yaoundeconnect.com",
  "password": "AdminAlpha123!"
}

# Copiez le token pour @adminAlphaToken
@adminAlphaToken = 

### 13.3 Admin √âquipe cr√©e ses mod√©rateurs
POST {{baseUrl}}/api/users
Authorization: Bearer {{adminAlphaToken}}
Content-Type: application/json

{
  "name": "Mod√©rateur Alpha 1",
  "email": "mod.alpha1@yaoundeconnect.com",
  "password": "ModAlpha123!",
  "role": "moderateur"
}

### 13.4 Statistiques apr√®s cr√©ation d'√©quipe
GET {{baseUrl}}/api/users/stats
Authorization: Bearer {{adminAlphaToken}}

### 13.5 Liste des utilisateurs de l'√©quipe
GET {{baseUrl}}/api/users?sort_by=created_at&sort_order=desc
Authorization: Bearer {{adminAlphaToken}}

# ====================================================================
# üßπ 14. NETTOYAGE ET V√âRIFICATIONS FINALES
# ====================================================================

### 14.1 Statistiques finales Super Admin
GET {{baseUrl}}/api/users/stats
Authorization: Bearer {{superAdminToken}}

### 14.2 Liste compl√®te finale (Super Admin)
GET {{baseUrl}}/api/users?limit=100&sort_by=created_at
Authorization: Bearer {{superAdminToken}}

### 14.3 V√©rifier les r√¥les finaux
GET {{baseUrl}}/api/users/roles
Authorization: Bearer {{superAdminToken}}

### 14.4 Test final de permissions
GET {{baseUrl}}/api/users/roles
Authorization: Bearer {{moderateurToken}}

### 14.5 D√©connexions finales
POST {{baseUrl}}/api/auth/logout
Authorization: Bearer {{superAdminToken}}

POST {{baseUrl}}/api/auth/logout
Authorization: Bearer {{adminToken}}

POST {{baseUrl}}/api/auth/logout
Authorization: Bearer {{moderateurToken}}

# ====================================================================
# üìù R√âSUM√â DU SYST√àME TEST√â
# ====================================================================

# ‚úÖ FONCTIONNALIT√âS TEST√âES :
# 
# üèóÔ∏è HI√âRARCHIE DES R√îLES :
# - SuperAdmin (niveau 4) ‚Üí g√®re Admin, Mod√©rateur, Collecteur, Membre
# - Admin (niveau 3) ‚Üí g√®re Mod√©rateur, Collecteur
# - Mod√©rateur (niveau 2) ‚Üí g√®re Collecteur
# - Collecteur (niveau 1) ‚Üí aucune gestion
# - Membre (niveau 0) ‚Üí aucune gestion
#
# üîê S√âCURIT√â :
# - Authentication obligatoire
# - Permissions hi√©rarchiques strictes
# - Auto-gestion interdite
# - Validation des mots de passe
# - Validation des emails
#
# üìä GESTION :
# - Cr√©ation d'utilisateurs selon permissions
# - Modification d'utilisateurs
# - Suppression (mod√©rateur+ uniquement)
# - R√©initialisation mots de passe (mod√©rateur+ uniquement)
# - Consultation et filtrage
# - Statistiques par r√¥le
#
# üìú AUDIT :
# - Historique complet des modifications
# - Tra√ßabilit√© de qui a fait quoi
# - Logs d'audit dans la base de donn√©es
# - Journalisation des actions critiques
#
# üéØ ENDPOINTS TEST√âS :
# - GET /api/users (liste avec filtres)
# - GET /api/users/:id (utilisateur sp√©cifique)
# - POST /api/users (cr√©ation)
# - PUT /api/users/:id (modification)
# - DELETE /api/users/:id (suppression)
# - POST /api/users/:id/reset-password (reset password)
# - GET /api/users/:id/history (historique)
# - GET /api/users/stats (statistiques)
# - GET /api/users/roles (r√¥les g√©rables)
#
# üéâ SYST√àME DE GESTION UTILISATEURS VALID√â !

# ====================================================================
# üö® NOTES IMPORTANTES
# ====================================================================

# üìå TOKENS :
# - Copiez TOUJOURS les tokens depuis les r√©ponses de connexion
# - Remplacez les variables @xxxToken avec les vrais tokens
# - Les tokens expirent apr√®s 7 jours

# üìå HI√âRARCHIE STRICTE :
# - Chaque niveau ne peut g√©rer que les niveaux inf√©rieurs
# - Aucun utilisateur ne peut se g√©rer lui-m√™me
# - SuperAdmin a tous les droits

# üìå ACTIONS CRITIQUES :
# - Suppression : mod√©rateur+ uniquement
# - Reset password : mod√©rateur+ uniquement
# - Changement de r√¥le : selon hi√©rarchie

# üìå VALIDATION :
# - Mots de passe : min 8 chars, majuscule, minuscule, chiffre, sp√©cial
# - Emails : format valide et unique
# - Noms : 2-100 caract√®res

# üìå AUDIT COMPLET :
# - Toutes les actions sont trac√©es
# - Historique disponible pour chaque utilisateur
# - Qui a cr√©√©/modifi√©/supprim√© est enregistr√©

# üìå ERREURS COMMUNES :
# - 401 : Token manquant/invalide
# - 403 : Permissions insuffisantes
# - 400 : Auto-gestion interdite
# - 409 : Email d√©j√† existant
# - 404 : Utilisateur non trouv√©

# üìå POUR R√âP√âTER LE TEST :
# 1. Changez les emails des utilisateurs de test
# 2. Mettez √† jour toutes les variables de tokens et IDs
# 3. Ex√©cutez dans l'ordre s√©quentiel
# 4. V√©rifiez les logs serveur pour le debug

# ====================================================================
# üîß CONFIGURATION REQUISE
# ====================================================================

# Base de donn√©es :
# - Table users avec colonne created_by
# - Table audit_logs fonctionnelle
# - Relations correctement d√©finies

# Variables d'environnement :
# - NODE_ENV=development (pour routes de debug)
# - JWT_SECRET configur√©
# - Base de donn√©es connect√©e

# D√©pendances :
# - bcryptjs pour hachage passwords
# - jsonwebtoken pour tokens
# - joi pour validation
# - sequelize pour ORM

# ====================================================================
# üéØ R√âSULTATS ATTENDUS
# ====================================================================

# üü¢ SUCC√àS ATTENDUS :
# - SuperAdmin peut tout g√©rer
# - Admin g√®re mod√©rateurs et collecteurs uniquement
# - Mod√©rateur g√®re collecteurs uniquement
# - Collecteur et Membre ne peuvent rien g√©rer
# - Audit trail complet et fonctionnel
# - S√©curit√© et validations strictes

# üî¥ √âCHECS ATTENDUS :
# - Tentatives de gestion hors hi√©rarchie
# - Auto-gestion via routes de gestion
# - Cr√©ation avec donn√©es invalides
# - Actions sans permissions suffisantes
# - Tokens invalides ou expir√©s

# üöÄ PR√äT POUR LA PRODUCTION !